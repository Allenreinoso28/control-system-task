

TO DO LIST:

Start Date: September 12, 2024
Due Date: September 27, 2024

- go over Robotics team application  package

- install all required packages

- read over documentation 

- brainstorm and pseudocode solution (chatgpt) 

Your Task: üôÉ
Your job is to build a viable control system for our 2023 rover as well as code a solution for
option A or B. In other words, you need to write code so someone can move the rover.



Control System Task:üíª


This control system will consist of a primary component that you will need to develop:
1. Software to take in controller input and send controls
Despite some of the requirements below, you will have plenty of freedom to develop the
system as you please. The main thing we care about is showing creativity in solutions. We
want to see what kind of system design decision you‚Äôve made and why. (So feel free to do
whatever you want)

Requirements:
Below is a list of requirements (that are required) for this control system task. To have
your submission graded, you must follow all requirements.

Language/Library Requirements:
- You MUST ONLY use Python to code your software
- You MUST ONLY use the Python socket library to send packets

Design Requirements:
1. ALL packets that you send MUST be printed via the print() function
2. Your program must be designed such that the user can move every motor on the
rover
3. Your program must be designed such that the user can use a video game
controller to operate the rover (see the Important Questions section of this
document if you do not own a video game controller)
4. Using the Socket Library, your program must be able to send packets of the correct
format
Page 5
When you send a Drive Command packet, it MUST follow the following format (excluding
quotations):
‚ÄúD_rightWheel1_rightWheel2_rightWheel3_leftWheel1_leftWheel2_leftWheel3‚Äù
- Where leftWheel1, leftWheel2, leftWheel3, rightWheel1, rightWheel2, and
rightWheel3 are the respective PWM values of each motor.
- 128 - 255 PWM -> Wheels spin clockwise
- 128 - 0 PWM -> Wheels spin counterclockwise
- Note: You are expected to begin each drive command packet with the String ‚ÄúD_‚Äù;
Each entry is to be separated by an underscore.
When you send an Arm Command packet, it MUST follow the following format (excluding
quotations):
‚ÄúA_elbow_wristright_wristleft_claw_gantry_shoulder‚Äù
- Where shoulder, wristright, wristleft, claw, gantry, and elbow are the respective
PWM values of each motor.
- 128 - 255 PWM -> Gantry moves up
- 128 - 255 PWM -> Claw opens
- 128 - 255 PWM -> Elbow moves up
- 128 - 255 PWM Wristright and Wristleft -> Spins the claw clockwise
- 128 - 255 PWM Wristleft and 128 - 0 PWM Wristright -> claw moves up
- 128 - 255 PWM -> Shoulder spins clockwise
- Doing the opposite PWM for the above movement will cause the movement
to be opposite as well
- Note: You are expected to begin each arm command packet with the String ‚ÄúA_‚Äù;
Each entry is to be separated by an underscore.

What are PWM Values?
Just for clarification, We‚Äôll briefly explain what PWM values are. Essentially, you can think of
them as a method to spin the motors. PWM values range from 0 to 255. If you want to
motor to not spin, you would give a PWM value of 127 or 128, the middle of the range. If
you want the motor to spin at the maximum possible speed clockwise, you would provide a
value of 255, the maximum number a PWM value can be. Conversely, providing a PWM
value of 0 would spin the motor at the maximum speed counter clockwise.



packages:
python socket lib
(ps4 controller package) pyPS4Controller 1.2.5


